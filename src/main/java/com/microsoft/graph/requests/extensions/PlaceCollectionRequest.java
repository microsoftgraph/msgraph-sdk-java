// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.requests.extensions;

import com.microsoft.graph.concurrency.*;
import com.microsoft.graph.core.*;
import com.microsoft.graph.models.extensions.*;
import com.microsoft.graph.models.generated.*;
import com.microsoft.graph.http.*;
import com.microsoft.graph.requests.extensions.*;
import com.microsoft.graph.options.*;
import com.microsoft.graph.serializer.*;

import java.util.Arrays;
import java.util.EnumSet;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Place Collection Request.
 */
public class PlaceCollectionRequest extends BaseCollectionRequest<PlaceCollectionResponse, IPlaceCollectionPage> implements IPlaceCollectionRequest {

    /**
     * The request builder for this collection of Place
     *
     * @param requestUrl     the request URL
     * @param client         the service client
     * @param requestOptions the options for this request
     */
    public PlaceCollectionRequest(final String requestUrl, IBaseClient client, final java.util.List<? extends Option> requestOptions) {
        super(requestUrl, client, requestOptions, PlaceCollectionResponse.class, IPlaceCollectionPage.class);
    }

    public void get(final ICallback<IPlaceCollectionPage> callback) {
        final IExecutors executors = getBaseRequest().getClient().getExecutors();
        executors.performOnBackground(new Runnable() {
           @Override
           public void run() {
                try {
                    executors.performOnForeground(get(), callback);
                } catch (final ClientException e) {
                    executors.performOnForeground(e, callback);
                }
           }
        });
    }

    public IPlaceCollectionPage get() throws ClientException {
        final PlaceCollectionResponse response = send();
        return buildFromResponse(response);
    }

    public void post(final Place newPlace, final ICallback<Place> callback) {
        final String requestUrl = getBaseRequest().getRequestUrl().toString();
        new PlaceRequestBuilder(requestUrl, getBaseRequest().getClient(), /* Options */ null)
            .buildRequest(getBaseRequest().getOptions())
            .post(newPlace, callback);
    }

    public Place post(final Place newPlace) throws ClientException {
        final String requestUrl = getBaseRequest().getRequestUrl().toString();
        return new PlaceRequestBuilder(requestUrl, getBaseRequest().getClient(), /* Options */ null)
            .buildRequest(getBaseRequest().getOptions())
            .post(newPlace);
    }

    /**
     * Sets the expand clause for the request
     *
     * @param value the expand clause
     * @return the updated request
     */
    public IPlaceCollectionRequest expand(final String value) {
        addQueryOption(new QueryOption("$expand", value));
        return (PlaceCollectionRequest)this;
    }

    /**
     * Sets the select clause for the request
     *
     * @param value the select clause
     * @return the updated request
     */
    public IPlaceCollectionRequest select(final String value) {
        addQueryOption(new QueryOption("$select", value));
        return (PlaceCollectionRequest)this;
    }

    /**
     * Sets the top value for the request
     *
     * @param value the max number of items to return
     * @return the updated request
     */
    public IPlaceCollectionRequest top(final int value) {
        addQueryOption(new QueryOption("$top", value + ""));
        return (PlaceCollectionRequest)this;
    }

    public IPlaceCollectionPage buildFromResponse(final PlaceCollectionResponse response) {
        final IPlaceCollectionRequestBuilder builder;
        if (response.nextLink != null) {
            builder = new PlaceCollectionRequestBuilder(response.nextLink, getBaseRequest().getClient(), /* options */ null);
        } else {
            builder = null;
        }
        final PlaceCollectionPage page = new PlaceCollectionPage(response, builder);
        page.setRawObject(response.getSerializer(), response.getRawObject());
        return page;
    }
}
