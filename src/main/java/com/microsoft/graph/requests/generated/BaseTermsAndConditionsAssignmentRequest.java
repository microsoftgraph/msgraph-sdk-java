// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.requests.generated;
import com.microsoft.graph.requests.extensions.ITermsAndConditionsAssignmentRequest;
import com.microsoft.graph.requests.extensions.TermsAndConditionsAssignmentRequest;
import com.microsoft.graph.models.extensions.TermsAndConditionsAssignment;

import com.microsoft.graph.concurrency.ICallback;
import com.microsoft.graph.core.ClientException;
import com.microsoft.graph.core.IBaseClient;
import com.microsoft.graph.http.BaseRequest;
import com.microsoft.graph.http.HttpMethod;
import com.microsoft.graph.options.Option;
import com.microsoft.graph.options.QueryOption;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Base Terms And Conditions Assignment Request.
 */
public class BaseTermsAndConditionsAssignmentRequest extends BaseRequest implements IBaseTermsAndConditionsAssignmentRequest {

    /**
     * The request for the TermsAndConditionsAssignment
     *
     * @param requestUrl     the request URL
     * @param client         the service client
     * @param requestOptions the options for this request
     * @param responseClass  the class of the response
     */
    public BaseTermsAndConditionsAssignmentRequest(final String requestUrl,
            final IBaseClient client,
            final java.util.List<? extends Option> requestOptions,
            final Class<TermsAndConditionsAssignment> responseClass) {
        super(requestUrl, client, requestOptions, responseClass);
    }

    /**
     * Gets the TermsAndConditionsAssignment from the service
     *
     * @param callback the callback to be called after success or failure
     */
    public void get(final ICallback<TermsAndConditionsAssignment> callback) {
        send(HttpMethod.GET, callback, null);
    }

    /**
     * Gets the TermsAndConditionsAssignment from the service
     *
     * @return the TermsAndConditionsAssignment from the request
     * @throws ClientException this exception occurs if the request was unable to complete for any reason
     */
    public TermsAndConditionsAssignment get() throws ClientException {
       return send(HttpMethod.GET, null);
    }

    /**
     * Delete this item from the service
     *
     * @param callback the callback when the deletion action has completed
     */
    public void delete(final ICallback<TermsAndConditionsAssignment> callback) {
        send(HttpMethod.DELETE, callback, null);
    }

    /**
     * Delete this item from the service
     *
     * @throws ClientException if there was an exception during the delete operation
     */
    public void delete() throws ClientException {
        send(HttpMethod.DELETE, null);
    }

    /**
     * Patches this TermsAndConditionsAssignment with a source
     *
     * @param sourceTermsAndConditionsAssignment the source object with updates
     * @param callback the callback to be called after success or failure
     */
    public void patch(final TermsAndConditionsAssignment sourceTermsAndConditionsAssignment, final ICallback<TermsAndConditionsAssignment> callback) {
        send(HttpMethod.PATCH, callback, sourceTermsAndConditionsAssignment);
    }

    /**
     * Patches this TermsAndConditionsAssignment with a source
     *
     * @param sourceTermsAndConditionsAssignment the source object with updates
     * @return the updated TermsAndConditionsAssignment
     * @throws ClientException this exception occurs if the request was unable to complete for any reason
     */
    public TermsAndConditionsAssignment patch(final TermsAndConditionsAssignment sourceTermsAndConditionsAssignment) throws ClientException {
        return send(HttpMethod.PATCH, sourceTermsAndConditionsAssignment);
    }

    /**
     * Creates a TermsAndConditionsAssignment with a new object
     *
     * @param newTermsAndConditionsAssignment the new object to create
     * @param callback the callback to be called after success or failure
     */
    public void post(final TermsAndConditionsAssignment newTermsAndConditionsAssignment, final ICallback<TermsAndConditionsAssignment> callback) {
        send(HttpMethod.POST, callback, newTermsAndConditionsAssignment);
    }

    /**
     * Creates a TermsAndConditionsAssignment with a new object
     *
     * @param newTermsAndConditionsAssignment the new object to create
     * @return the created TermsAndConditionsAssignment
     * @throws ClientException this exception occurs if the request was unable to complete for any reason
     */
    public TermsAndConditionsAssignment post(final TermsAndConditionsAssignment newTermsAndConditionsAssignment) throws ClientException {
        return send(HttpMethod.POST, newTermsAndConditionsAssignment);
    }

    /**
     * Sets the select clause for the request
     *
     * @param value the select clause
     * @return the updated request
     */
     public ITermsAndConditionsAssignmentRequest select(final String value) {
         getQueryOptions().add(new QueryOption("$select", value));
         return (TermsAndConditionsAssignmentRequest)this;
     }

    /**
     * Sets the expand clause for the request
     *
     * @param value the expand clause
     * @return the updated request
     */
     public ITermsAndConditionsAssignmentRequest expand(final String value) {
         getQueryOptions().add(new QueryOption("$expand", value));
         return (TermsAndConditionsAssignmentRequest)this;
     }

}

