package com.microsoft.graph.models;

import com.microsoft.kiota.serialization.Parsable;
import com.microsoft.kiota.serialization.ParseNode;
import com.microsoft.kiota.serialization.SerializationWriter;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
public class LearningCourseActivity extends Entity implements Parsable {
    /**
     * Date and time when the assignment was completed. Optional.
     */
    private OffsetDateTime completedDateTime;
    /**
     * The percentage completion value of the course activity. Optional.
     */
    private Integer completionPercentage;
    /**
     * A course activity ID generated by the provider. Optional.
     */
    private String externalcourseActivityId;
    /**
     * The user ID of the learner to whom the activity is assigned. Required.
     */
    private String learnerUserId;
    /**
     * The ID of the learning content created in Viva Learning. Required.
     */
    private String learningContentId;
    /**
     * The registration ID of the provider. Required.
     */
    private String learningProviderId;
    /**
     * The status of the course activity. Possible values are: notStarted, inProgress, completed. Required.
     */
    private CourseStatus status;
    /**
     * Instantiates a new learningCourseActivity and sets the default values.
     * @return a void
     */
    @javax.annotation.Nullable
    public LearningCourseActivity() {
        super();
    }
    /**
     * Creates a new instance of the appropriate class based on discriminator value
     * @param parseNode The parse node to use to read the discriminator value and create the object
     * @return a learningCourseActivity
     */
    @javax.annotation.Nonnull
    public static LearningCourseActivity createFromDiscriminatorValue(@javax.annotation.Nonnull final ParseNode parseNode) {
        Objects.requireNonNull(parseNode);
        final ParseNode mappingValueNode = parseNode.getChildNode("@odata.type");
        if (mappingValueNode != null) {
            final String mappingValue = mappingValueNode.getStringValue();
            switch (mappingValue) {
                case "#microsoft.graph.learningAssignment": return new LearningAssignment();
                case "#microsoft.graph.learningSelfInitiatedCourse": return new LearningSelfInitiatedCourse();
            }
        }
        return new LearningCourseActivity();
    }
    /**
     * Gets the completedDateTime property value. Date and time when the assignment was completed. Optional.
     * @return a OffsetDateTime
     */
    @javax.annotation.Nullable
    public OffsetDateTime getCompletedDateTime() {
        return this.completedDateTime;
    }
    /**
     * Gets the completionPercentage property value. The percentage completion value of the course activity. Optional.
     * @return a integer
     */
    @javax.annotation.Nullable
    public Integer getCompletionPercentage() {
        return this.completionPercentage;
    }
    /**
     * Gets the externalcourseActivityId property value. A course activity ID generated by the provider. Optional.
     * @return a string
     */
    @javax.annotation.Nullable
    public String getExternalcourseActivityId() {
        return this.externalcourseActivityId;
    }
    /**
     * The deserialization information for the current model
     * @return a Map<String, java.util.function.Consumer<ParseNode>>
     */
    @javax.annotation.Nonnull
    public Map<String, java.util.function.Consumer<ParseNode>> getFieldDeserializers() {
        final HashMap<String, java.util.function.Consumer<ParseNode>> deserializerMap = new HashMap<String, java.util.function.Consumer<ParseNode>>(super.getFieldDeserializers());
        deserializerMap.put("completedDateTime", (n) -> { this.setCompletedDateTime(n.getOffsetDateTimeValue()); });
        deserializerMap.put("completionPercentage", (n) -> { this.setCompletionPercentage(n.getIntegerValue()); });
        deserializerMap.put("externalcourseActivityId", (n) -> { this.setExternalcourseActivityId(n.getStringValue()); });
        deserializerMap.put("learnerUserId", (n) -> { this.setLearnerUserId(n.getStringValue()); });
        deserializerMap.put("learningContentId", (n) -> { this.setLearningContentId(n.getStringValue()); });
        deserializerMap.put("learningProviderId", (n) -> { this.setLearningProviderId(n.getStringValue()); });
        deserializerMap.put("status", (n) -> { this.setStatus(n.getEnumValue(CourseStatus.class)); });
        return deserializerMap;
    }
    /**
     * Gets the learnerUserId property value. The user ID of the learner to whom the activity is assigned. Required.
     * @return a string
     */
    @javax.annotation.Nullable
    public String getLearnerUserId() {
        return this.learnerUserId;
    }
    /**
     * Gets the learningContentId property value. The ID of the learning content created in Viva Learning. Required.
     * @return a string
     */
    @javax.annotation.Nullable
    public String getLearningContentId() {
        return this.learningContentId;
    }
    /**
     * Gets the learningProviderId property value. The registration ID of the provider. Required.
     * @return a string
     */
    @javax.annotation.Nullable
    public String getLearningProviderId() {
        return this.learningProviderId;
    }
    /**
     * Gets the status property value. The status of the course activity. Possible values are: notStarted, inProgress, completed. Required.
     * @return a courseStatus
     */
    @javax.annotation.Nullable
    public CourseStatus getStatus() {
        return this.status;
    }
    /**
     * Serializes information the current object
     * @param writer Serialization writer to use to serialize this model
     * @return a void
     */
    @javax.annotation.Nonnull
    public void serialize(@javax.annotation.Nonnull final SerializationWriter writer) {
        Objects.requireNonNull(writer);
        super.serialize(writer);
        writer.writeOffsetDateTimeValue("completedDateTime", this.getCompletedDateTime());
        writer.writeIntegerValue("completionPercentage", this.getCompletionPercentage());
        writer.writeStringValue("externalcourseActivityId", this.getExternalcourseActivityId());
        writer.writeStringValue("learnerUserId", this.getLearnerUserId());
        writer.writeStringValue("learningContentId", this.getLearningContentId());
        writer.writeStringValue("learningProviderId", this.getLearningProviderId());
        writer.writeEnumValue("status", this.getStatus());
    }
    /**
     * Sets the completedDateTime property value. Date and time when the assignment was completed. Optional.
     * @param value Value to set for the completedDateTime property.
     * @return a void
     */
    @javax.annotation.Nonnull
    public void setCompletedDateTime(@javax.annotation.Nullable final OffsetDateTime value) {
        this.completedDateTime = value;
    }
    /**
     * Sets the completionPercentage property value. The percentage completion value of the course activity. Optional.
     * @param value Value to set for the completionPercentage property.
     * @return a void
     */
    @javax.annotation.Nonnull
    public void setCompletionPercentage(@javax.annotation.Nullable final Integer value) {
        this.completionPercentage = value;
    }
    /**
     * Sets the externalcourseActivityId property value. A course activity ID generated by the provider. Optional.
     * @param value Value to set for the externalcourseActivityId property.
     * @return a void
     */
    @javax.annotation.Nonnull
    public void setExternalcourseActivityId(@javax.annotation.Nullable final String value) {
        this.externalcourseActivityId = value;
    }
    /**
     * Sets the learnerUserId property value. The user ID of the learner to whom the activity is assigned. Required.
     * @param value Value to set for the learnerUserId property.
     * @return a void
     */
    @javax.annotation.Nonnull
    public void setLearnerUserId(@javax.annotation.Nullable final String value) {
        this.learnerUserId = value;
    }
    /**
     * Sets the learningContentId property value. The ID of the learning content created in Viva Learning. Required.
     * @param value Value to set for the learningContentId property.
     * @return a void
     */
    @javax.annotation.Nonnull
    public void setLearningContentId(@javax.annotation.Nullable final String value) {
        this.learningContentId = value;
    }
    /**
     * Sets the learningProviderId property value. The registration ID of the provider. Required.
     * @param value Value to set for the learningProviderId property.
     * @return a void
     */
    @javax.annotation.Nonnull
    public void setLearningProviderId(@javax.annotation.Nullable final String value) {
        this.learningProviderId = value;
    }
    /**
     * Sets the status property value. The status of the course activity. Possible values are: notStarted, inProgress, completed. Required.
     * @param value Value to set for the status property.
     * @return a void
     */
    @javax.annotation.Nonnull
    public void setStatus(@javax.annotation.Nullable final CourseStatus value) {
        this.status = value;
    }
}
