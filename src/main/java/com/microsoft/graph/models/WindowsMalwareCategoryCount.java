package com.microsoft.graph.models;

import com.microsoft.kiota.serialization.AdditionalDataHolder;
import com.microsoft.kiota.serialization.Parsable;
import com.microsoft.kiota.serialization.ParseNode;
import com.microsoft.kiota.serialization.SerializationWriter;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
/**
 * Malware category device count
 */
@jakarta.annotation.Generated("com.microsoft.kiota")
public class WindowsMalwareCategoryCount implements AdditionalDataHolder, Parsable {
    /**
     * Count of active malware detections for this malware category. Valid values -2147483648 to 2147483647
     */
    private Integer activeMalwareDetectionCount;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    private Map<String, Object> additionalData;
    /**
     * Malware category id
     */
    private WindowsMalwareCategory category;
    /**
     * Count of devices with malware detections for this malware category
     */
    private Integer deviceCount;
    /**
     * Count of distinct active malwares for this malware category. Valid values -2147483648 to 2147483647
     */
    private Integer distinctActiveMalwareCount;
    /**
     * The Timestamp of the last update for the device count in UTC
     */
    private OffsetDateTime lastUpdateDateTime;
    /**
     * The OdataType property
     */
    private String odataType;
    /**
     * Instantiates a new WindowsMalwareCategoryCount and sets the default values.
     */
    public WindowsMalwareCategoryCount() {
        this.setAdditionalData(new HashMap<>());
    }
    /**
     * Creates a new instance of the appropriate class based on discriminator value
     * @param parseNode The parse node to use to read the discriminator value and create the object
     * @return a WindowsMalwareCategoryCount
     */
    @jakarta.annotation.Nonnull
    public static WindowsMalwareCategoryCount createFromDiscriminatorValue(@jakarta.annotation.Nonnull final ParseNode parseNode) {
        Objects.requireNonNull(parseNode);
        return new WindowsMalwareCategoryCount();
    }
    /**
     * Gets the activeMalwareDetectionCount property value. Count of active malware detections for this malware category. Valid values -2147483648 to 2147483647
     * @return a Integer
     */
    @jakarta.annotation.Nullable
    public Integer getActiveMalwareDetectionCount() {
        return this.activeMalwareDetectionCount;
    }
    /**
     * Gets the AdditionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     * @return a Map<String, Object>
     */
    @jakarta.annotation.Nonnull
    public Map<String, Object> getAdditionalData() {
        return this.additionalData;
    }
    /**
     * Gets the category property value. Malware category id
     * @return a WindowsMalwareCategory
     */
    @jakarta.annotation.Nullable
    public WindowsMalwareCategory getCategory() {
        return this.category;
    }
    /**
     * Gets the deviceCount property value. Count of devices with malware detections for this malware category
     * @return a Integer
     */
    @jakarta.annotation.Nullable
    public Integer getDeviceCount() {
        return this.deviceCount;
    }
    /**
     * Gets the distinctActiveMalwareCount property value. Count of distinct active malwares for this malware category. Valid values -2147483648 to 2147483647
     * @return a Integer
     */
    @jakarta.annotation.Nullable
    public Integer getDistinctActiveMalwareCount() {
        return this.distinctActiveMalwareCount;
    }
    /**
     * The deserialization information for the current model
     * @return a Map<String, java.util.function.Consumer<ParseNode>>
     */
    @jakarta.annotation.Nonnull
    public Map<String, java.util.function.Consumer<ParseNode>> getFieldDeserializers() {
        final HashMap<String, java.util.function.Consumer<ParseNode>> deserializerMap = new HashMap<String, java.util.function.Consumer<ParseNode>>(6);
        deserializerMap.put("activeMalwareDetectionCount", (n) -> { this.setActiveMalwareDetectionCount(n.getIntegerValue()); });
        deserializerMap.put("category", (n) -> { this.setCategory(n.getEnumValue(WindowsMalwareCategory.class)); });
        deserializerMap.put("deviceCount", (n) -> { this.setDeviceCount(n.getIntegerValue()); });
        deserializerMap.put("distinctActiveMalwareCount", (n) -> { this.setDistinctActiveMalwareCount(n.getIntegerValue()); });
        deserializerMap.put("lastUpdateDateTime", (n) -> { this.setLastUpdateDateTime(n.getOffsetDateTimeValue()); });
        deserializerMap.put("@odata.type", (n) -> { this.setOdataType(n.getStringValue()); });
        return deserializerMap;
    }
    /**
     * Gets the lastUpdateDateTime property value. The Timestamp of the last update for the device count in UTC
     * @return a OffsetDateTime
     */
    @jakarta.annotation.Nullable
    public OffsetDateTime getLastUpdateDateTime() {
        return this.lastUpdateDateTime;
    }
    /**
     * Gets the @odata.type property value. The OdataType property
     * @return a String
     */
    @jakarta.annotation.Nullable
    public String getOdataType() {
        return this.odataType;
    }
    /**
     * Serializes information the current object
     * @param writer Serialization writer to use to serialize this model
     */
    public void serialize(@jakarta.annotation.Nonnull final SerializationWriter writer) {
        Objects.requireNonNull(writer);
        writer.writeIntegerValue("activeMalwareDetectionCount", this.getActiveMalwareDetectionCount());
        writer.writeEnumValue("category", this.getCategory());
        writer.writeIntegerValue("deviceCount", this.getDeviceCount());
        writer.writeIntegerValue("distinctActiveMalwareCount", this.getDistinctActiveMalwareCount());
        writer.writeOffsetDateTimeValue("lastUpdateDateTime", this.getLastUpdateDateTime());
        writer.writeStringValue("@odata.type", this.getOdataType());
        writer.writeAdditionalData(this.getAdditionalData());
    }
    /**
     * Sets the activeMalwareDetectionCount property value. Count of active malware detections for this malware category. Valid values -2147483648 to 2147483647
     * @param value Value to set for the activeMalwareDetectionCount property.
     */
    public void setActiveMalwareDetectionCount(@jakarta.annotation.Nullable final Integer value) {
        this.activeMalwareDetectionCount = value;
    }
    /**
     * Sets the AdditionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     * @param value Value to set for the AdditionalData property.
     */
    public void setAdditionalData(@jakarta.annotation.Nullable final Map<String, Object> value) {
        this.additionalData = value;
    }
    /**
     * Sets the category property value. Malware category id
     * @param value Value to set for the category property.
     */
    public void setCategory(@jakarta.annotation.Nullable final WindowsMalwareCategory value) {
        this.category = value;
    }
    /**
     * Sets the deviceCount property value. Count of devices with malware detections for this malware category
     * @param value Value to set for the deviceCount property.
     */
    public void setDeviceCount(@jakarta.annotation.Nullable final Integer value) {
        this.deviceCount = value;
    }
    /**
     * Sets the distinctActiveMalwareCount property value. Count of distinct active malwares for this malware category. Valid values -2147483648 to 2147483647
     * @param value Value to set for the distinctActiveMalwareCount property.
     */
    public void setDistinctActiveMalwareCount(@jakarta.annotation.Nullable final Integer value) {
        this.distinctActiveMalwareCount = value;
    }
    /**
     * Sets the lastUpdateDateTime property value. The Timestamp of the last update for the device count in UTC
     * @param value Value to set for the lastUpdateDateTime property.
     */
    public void setLastUpdateDateTime(@jakarta.annotation.Nullable final OffsetDateTime value) {
        this.lastUpdateDateTime = value;
    }
    /**
     * Sets the @odata.type property value. The OdataType property
     * @param value Value to set for the @odata.type property.
     */
    public void setOdataType(@jakarta.annotation.Nullable final String value) {
        this.odataType = value;
    }
}
