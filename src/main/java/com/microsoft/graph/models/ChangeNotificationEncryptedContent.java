package com.microsoft.graph.models;

import com.microsoft.kiota.serialization.AdditionalDataHolder;
import com.microsoft.kiota.serialization.Parsable;
import com.microsoft.kiota.serialization.ParseNode;
import com.microsoft.kiota.serialization.SerializationWriter;
import java.util.function.Consumer;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
public class ChangeNotificationEncryptedContent implements AdditionalDataHolder, Parsable {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    private Map<String, Object> _additionalData;
    /** Base64-encoded encrypted data that produces a full resource respresented as JSON. The data has been encrypted with the provided dataKey using an AES/CBC/PKCS5PADDING cipher suite. */
    private String _data;
    /** Base64-encoded symmetric key generated by Microsoft Graph to encrypt the data value and to generate the data signature. This key is encrypted with the certificate public key that was provided during the subscription. It must be decrypted with the certificate private key before it can be used to decrypt the data or verify the signature. This key has been encrypted with the following cipher suite: RSA/ECB/OAEPWithSHA1AndMGF1Padding. */
    private String _dataKey;
    /** Base64-encoded HMAC-SHA256 hash of the data for validation purposes. */
    private String _dataSignature;
    /** ID of the certificate used to encrypt the dataKey. */
    private String _encryptionCertificateId;
    /** Hexadecimal representation of the thumbprint of the certificate used to encrypt the dataKey. */
    private String _encryptionCertificateThumbprint;
    /** The OdataType property */
    private String _odataType;
    /**
     * Instantiates a new changeNotificationEncryptedContent and sets the default values.
     * @return a void
     */
    @javax.annotation.Nullable
    public ChangeNotificationEncryptedContent() {
        this.setAdditionalData(new HashMap<>());
        this.setOdataType("#microsoft.graph.changeNotificationEncryptedContent");
    }
    /**
     * Creates a new instance of the appropriate class based on discriminator value
     * @param parseNode The parse node to use to read the discriminator value and create the object
     * @return a changeNotificationEncryptedContent
     */
    @javax.annotation.Nonnull
    public static ChangeNotificationEncryptedContent createFromDiscriminatorValue(@javax.annotation.Nonnull final ParseNode parseNode) {
        Objects.requireNonNull(parseNode);
        return new ChangeNotificationEncryptedContent();
    }
    /**
     * Gets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     * @return a Map<String, Object>
     */
    @javax.annotation.Nonnull
    public Map<String, Object> getAdditionalData() {
        return this._additionalData;
    }
    /**
     * Gets the data property value. Base64-encoded encrypted data that produces a full resource respresented as JSON. The data has been encrypted with the provided dataKey using an AES/CBC/PKCS5PADDING cipher suite.
     * @return a string
     */
    @javax.annotation.Nullable
    public String getData() {
        return this._data;
    }
    /**
     * Gets the dataKey property value. Base64-encoded symmetric key generated by Microsoft Graph to encrypt the data value and to generate the data signature. This key is encrypted with the certificate public key that was provided during the subscription. It must be decrypted with the certificate private key before it can be used to decrypt the data or verify the signature. This key has been encrypted with the following cipher suite: RSA/ECB/OAEPWithSHA1AndMGF1Padding.
     * @return a string
     */
    @javax.annotation.Nullable
    public String getDataKey() {
        return this._dataKey;
    }
    /**
     * Gets the dataSignature property value. Base64-encoded HMAC-SHA256 hash of the data for validation purposes.
     * @return a string
     */
    @javax.annotation.Nullable
    public String getDataSignature() {
        return this._dataSignature;
    }
    /**
     * Gets the encryptionCertificateId property value. ID of the certificate used to encrypt the dataKey.
     * @return a string
     */
    @javax.annotation.Nullable
    public String getEncryptionCertificateId() {
        return this._encryptionCertificateId;
    }
    /**
     * Gets the encryptionCertificateThumbprint property value. Hexadecimal representation of the thumbprint of the certificate used to encrypt the dataKey.
     * @return a string
     */
    @javax.annotation.Nullable
    public String getEncryptionCertificateThumbprint() {
        return this._encryptionCertificateThumbprint;
    }
    /**
     * The deserialization information for the current model
     * @return a Map<String, Consumer<ParseNode>>
     */
    @javax.annotation.Nonnull
    public Map<String, Consumer<ParseNode>> getFieldDeserializers() {
        final ChangeNotificationEncryptedContent currentObject = this;
        return new HashMap<String, Consumer<ParseNode>>(6) {{
            this.put("data", (n) -> { currentObject.setData(n.getStringValue()); });
            this.put("dataKey", (n) -> { currentObject.setDataKey(n.getStringValue()); });
            this.put("dataSignature", (n) -> { currentObject.setDataSignature(n.getStringValue()); });
            this.put("encryptionCertificateId", (n) -> { currentObject.setEncryptionCertificateId(n.getStringValue()); });
            this.put("encryptionCertificateThumbprint", (n) -> { currentObject.setEncryptionCertificateThumbprint(n.getStringValue()); });
            this.put("@odata.type", (n) -> { currentObject.setOdataType(n.getStringValue()); });
        }};
    }
    /**
     * Gets the @odata.type property value. The OdataType property
     * @return a string
     */
    @javax.annotation.Nullable
    public String getOdataType() {
        return this._odataType;
    }
    /**
     * Serializes information the current object
     * @param writer Serialization writer to use to serialize this model
     * @return a void
     */
    @javax.annotation.Nonnull
    public void serialize(@javax.annotation.Nonnull final SerializationWriter writer) {
        Objects.requireNonNull(writer);
        writer.writeStringValue("data", this.getData());
        writer.writeStringValue("dataKey", this.getDataKey());
        writer.writeStringValue("dataSignature", this.getDataSignature());
        writer.writeStringValue("encryptionCertificateId", this.getEncryptionCertificateId());
        writer.writeStringValue("encryptionCertificateThumbprint", this.getEncryptionCertificateThumbprint());
        writer.writeStringValue("@odata.type", this.getOdataType());
        writer.writeAdditionalData(this.getAdditionalData());
    }
    /**
     * Sets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     * @param value Value to set for the AdditionalData property.
     * @return a void
     */
    @javax.annotation.Nonnull
    public void setAdditionalData(@javax.annotation.Nullable final Map<String, Object> value) {
        this._additionalData = value;
    }
    /**
     * Sets the data property value. Base64-encoded encrypted data that produces a full resource respresented as JSON. The data has been encrypted with the provided dataKey using an AES/CBC/PKCS5PADDING cipher suite.
     * @param value Value to set for the data property.
     * @return a void
     */
    @javax.annotation.Nonnull
    public void setData(@javax.annotation.Nullable final String value) {
        this._data = value;
    }
    /**
     * Sets the dataKey property value. Base64-encoded symmetric key generated by Microsoft Graph to encrypt the data value and to generate the data signature. This key is encrypted with the certificate public key that was provided during the subscription. It must be decrypted with the certificate private key before it can be used to decrypt the data or verify the signature. This key has been encrypted with the following cipher suite: RSA/ECB/OAEPWithSHA1AndMGF1Padding.
     * @param value Value to set for the dataKey property.
     * @return a void
     */
    @javax.annotation.Nonnull
    public void setDataKey(@javax.annotation.Nullable final String value) {
        this._dataKey = value;
    }
    /**
     * Sets the dataSignature property value. Base64-encoded HMAC-SHA256 hash of the data for validation purposes.
     * @param value Value to set for the dataSignature property.
     * @return a void
     */
    @javax.annotation.Nonnull
    public void setDataSignature(@javax.annotation.Nullable final String value) {
        this._dataSignature = value;
    }
    /**
     * Sets the encryptionCertificateId property value. ID of the certificate used to encrypt the dataKey.
     * @param value Value to set for the encryptionCertificateId property.
     * @return a void
     */
    @javax.annotation.Nonnull
    public void setEncryptionCertificateId(@javax.annotation.Nullable final String value) {
        this._encryptionCertificateId = value;
    }
    /**
     * Sets the encryptionCertificateThumbprint property value. Hexadecimal representation of the thumbprint of the certificate used to encrypt the dataKey.
     * @param value Value to set for the encryptionCertificateThumbprint property.
     * @return a void
     */
    @javax.annotation.Nonnull
    public void setEncryptionCertificateThumbprint(@javax.annotation.Nullable final String value) {
        this._encryptionCertificateThumbprint = value;
    }
    /**
     * Sets the @odata.type property value. The OdataType property
     * @param value Value to set for the OdataType property.
     * @return a void
     */
    @javax.annotation.Nonnull
    public void setOdataType(@javax.annotation.Nullable final String value) {
        this._odataType = value;
    }
}
