package com.microsoft.graph.models;

import com.microsoft.kiota.serialization.Parsable;
import com.microsoft.kiota.serialization.ParseNode;
import com.microsoft.kiota.serialization.SerializationWriter;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
/**
 * Malware state for a windows device
 */
public class MalwareStateForWindowsDevice extends Entity implements Parsable {
    /**
     * Indicates the number of times the malware is detected
     */
    private Integer detectionCount;
    /**
     * Indicates the name of the device being evaluated for malware state
     */
    private String deviceName;
    /**
     * Indicates execution status of the malware. Possible values are: unknown, blocked, allowed, running, notRunning. Defaults to unknown. Possible values are: unknown, blocked, allowed, running, notRunning.
     */
    private WindowsMalwareExecutionState executionState;
    /**
     * Initial detection datetime of the malware
     */
    private OffsetDateTime initialDetectionDateTime;
    /**
     * The last time this particular threat was changed
     */
    private OffsetDateTime lastStateChangeDateTime;
    /**
     * Indicates threat status of the malware. Possible values are: active, actionFailed, manualStepsRequired, fullScanRequired, rebootRequired, remediatedWithNonCriticalFailures, quarantined, removed, cleaned, allowed, noStatusCleared. defaults to noStatusCleared. Possible values are: active, actionFailed, manualStepsRequired, fullScanRequired, rebootRequired, remediatedWithNonCriticalFailures, quarantined, removed, cleaned, allowed, noStatusCleared.
     */
    private WindowsMalwareThreatState threatState;
    /**
     * Instantiates a new malwareStateForWindowsDevice and sets the default values.
     * @return a void
     */
    @javax.annotation.Nullable
    public MalwareStateForWindowsDevice() {
        super();
    }
    /**
     * Creates a new instance of the appropriate class based on discriminator value
     * @param parseNode The parse node to use to read the discriminator value and create the object
     * @return a malwareStateForWindowsDevice
     */
    @javax.annotation.Nonnull
    public static MalwareStateForWindowsDevice createFromDiscriminatorValue(@javax.annotation.Nonnull final ParseNode parseNode) {
        Objects.requireNonNull(parseNode);
        return new MalwareStateForWindowsDevice();
    }
    /**
     * Gets the detectionCount property value. Indicates the number of times the malware is detected
     * @return a integer
     */
    @javax.annotation.Nullable
    public Integer getDetectionCount() {
        return this.detectionCount;
    }
    /**
     * Gets the deviceName property value. Indicates the name of the device being evaluated for malware state
     * @return a string
     */
    @javax.annotation.Nullable
    public String getDeviceName() {
        return this.deviceName;
    }
    /**
     * Gets the executionState property value. Indicates execution status of the malware. Possible values are: unknown, blocked, allowed, running, notRunning. Defaults to unknown. Possible values are: unknown, blocked, allowed, running, notRunning.
     * @return a windowsMalwareExecutionState
     */
    @javax.annotation.Nullable
    public WindowsMalwareExecutionState getExecutionState() {
        return this.executionState;
    }
    /**
     * The deserialization information for the current model
     * @return a Map<String, java.util.function.Consumer<ParseNode>>
     */
    @javax.annotation.Nonnull
    public Map<String, java.util.function.Consumer<ParseNode>> getFieldDeserializers() {
        final HashMap<String, java.util.function.Consumer<ParseNode>> deserializerMap = new HashMap<String, java.util.function.Consumer<ParseNode>>(super.getFieldDeserializers());
        deserializerMap.put("detectionCount", (n) -> { this.setDetectionCount(n.getIntegerValue()); });
        deserializerMap.put("deviceName", (n) -> { this.setDeviceName(n.getStringValue()); });
        deserializerMap.put("executionState", (n) -> { this.setExecutionState(n.getEnumValue(WindowsMalwareExecutionState.class)); });
        deserializerMap.put("initialDetectionDateTime", (n) -> { this.setInitialDetectionDateTime(n.getOffsetDateTimeValue()); });
        deserializerMap.put("lastStateChangeDateTime", (n) -> { this.setLastStateChangeDateTime(n.getOffsetDateTimeValue()); });
        deserializerMap.put("threatState", (n) -> { this.setThreatState(n.getEnumValue(WindowsMalwareThreatState.class)); });
        return deserializerMap;
    }
    /**
     * Gets the initialDetectionDateTime property value. Initial detection datetime of the malware
     * @return a OffsetDateTime
     */
    @javax.annotation.Nullable
    public OffsetDateTime getInitialDetectionDateTime() {
        return this.initialDetectionDateTime;
    }
    /**
     * Gets the lastStateChangeDateTime property value. The last time this particular threat was changed
     * @return a OffsetDateTime
     */
    @javax.annotation.Nullable
    public OffsetDateTime getLastStateChangeDateTime() {
        return this.lastStateChangeDateTime;
    }
    /**
     * Gets the threatState property value. Indicates threat status of the malware. Possible values are: active, actionFailed, manualStepsRequired, fullScanRequired, rebootRequired, remediatedWithNonCriticalFailures, quarantined, removed, cleaned, allowed, noStatusCleared. defaults to noStatusCleared. Possible values are: active, actionFailed, manualStepsRequired, fullScanRequired, rebootRequired, remediatedWithNonCriticalFailures, quarantined, removed, cleaned, allowed, noStatusCleared.
     * @return a windowsMalwareThreatState
     */
    @javax.annotation.Nullable
    public WindowsMalwareThreatState getThreatState() {
        return this.threatState;
    }
    /**
     * Serializes information the current object
     * @param writer Serialization writer to use to serialize this model
     * @return a void
     */
    @javax.annotation.Nonnull
    public void serialize(@javax.annotation.Nonnull final SerializationWriter writer) {
        Objects.requireNonNull(writer);
        super.serialize(writer);
        writer.writeIntegerValue("detectionCount", this.getDetectionCount());
        writer.writeStringValue("deviceName", this.getDeviceName());
        writer.writeEnumValue("executionState", this.getExecutionState());
        writer.writeOffsetDateTimeValue("initialDetectionDateTime", this.getInitialDetectionDateTime());
        writer.writeOffsetDateTimeValue("lastStateChangeDateTime", this.getLastStateChangeDateTime());
        writer.writeEnumValue("threatState", this.getThreatState());
    }
    /**
     * Sets the detectionCount property value. Indicates the number of times the malware is detected
     * @param value Value to set for the detectionCount property.
     * @return a void
     */
    @javax.annotation.Nonnull
    public void setDetectionCount(@javax.annotation.Nullable final Integer value) {
        this.detectionCount = value;
    }
    /**
     * Sets the deviceName property value. Indicates the name of the device being evaluated for malware state
     * @param value Value to set for the deviceName property.
     * @return a void
     */
    @javax.annotation.Nonnull
    public void setDeviceName(@javax.annotation.Nullable final String value) {
        this.deviceName = value;
    }
    /**
     * Sets the executionState property value. Indicates execution status of the malware. Possible values are: unknown, blocked, allowed, running, notRunning. Defaults to unknown. Possible values are: unknown, blocked, allowed, running, notRunning.
     * @param value Value to set for the executionState property.
     * @return a void
     */
    @javax.annotation.Nonnull
    public void setExecutionState(@javax.annotation.Nullable final WindowsMalwareExecutionState value) {
        this.executionState = value;
    }
    /**
     * Sets the initialDetectionDateTime property value. Initial detection datetime of the malware
     * @param value Value to set for the initialDetectionDateTime property.
     * @return a void
     */
    @javax.annotation.Nonnull
    public void setInitialDetectionDateTime(@javax.annotation.Nullable final OffsetDateTime value) {
        this.initialDetectionDateTime = value;
    }
    /**
     * Sets the lastStateChangeDateTime property value. The last time this particular threat was changed
     * @param value Value to set for the lastStateChangeDateTime property.
     * @return a void
     */
    @javax.annotation.Nonnull
    public void setLastStateChangeDateTime(@javax.annotation.Nullable final OffsetDateTime value) {
        this.lastStateChangeDateTime = value;
    }
    /**
     * Sets the threatState property value. Indicates threat status of the malware. Possible values are: active, actionFailed, manualStepsRequired, fullScanRequired, rebootRequired, remediatedWithNonCriticalFailures, quarantined, removed, cleaned, allowed, noStatusCleared. defaults to noStatusCleared. Possible values are: active, actionFailed, manualStepsRequired, fullScanRequired, rebootRequired, remediatedWithNonCriticalFailures, quarantined, removed, cleaned, allowed, noStatusCleared.
     * @param value Value to set for the threatState property.
     * @return a void
     */
    @javax.annotation.Nonnull
    public void setThreatState(@javax.annotation.Nullable final WindowsMalwareThreatState value) {
        this.threatState = value;
    }
}
